version: '3.5'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - botnet

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9095:9095"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT, PLAINTEXT1:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT1://localhost:9095, PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - botnet

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
      echo Waiting for Kafka to be ready... &&
      sleep 10 &&
      cub kafka-ready -b kafka:9093 1 20 &&
      kafka-topics --create --topic jokes --partitions 1 --replication-factor 1 --bootstrap-server kafka:9093
      "
    networks:
      - botnet

  scraper:
    build: joke-scraper
    container_name: scraper
    ports:
      - "8091:8091"
    depends_on:
      - kafka
    networks:
      - botnet
    environment:
      - KAFKA_HOST=kafka:9092
      - JOKE_TOPIC=jokes

  postgres:
    image: postgres:15.3-alpine3.18
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "7032:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "--quiet" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - botnet

  bot:
    build: joke-bot
    container_name: bot
    ports:
      - "8098:8098"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - botnet
    environment:
      - KAFKA_HOST=kafka:9092
      - JOKE_TOPIC=jokes
      - BOT_TOKEN=${BOT_TOKEN}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATA_SOURCE=postgres:5432
      - KAFKA_GROUP_ID=botID
      - BD_USERNAME=${POSTGRES_USER}
      - BD_PASSWORD=${POSTGRES_PASSWORD}

#  pgadmin:
#    container_name: pgadmin4_container
#    image: dpage/pgadmin4:7
#    restart: always
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@admin.com
#      PGADMIN_DEFAULT_PASSWORD: root
#    ports:
#      - "5050:80"
#    volumes:
#      - pgadmin-data:/var/lib/pgadmin
#    networks:
#      - botnet

networks:
  botnet:
    driver: bridge
    name: botnet

volumes:
  postgres-data:
  pgadmin-data: